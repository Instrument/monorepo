// IOS and Android-specific still not added

// scrollToStart(): void;
// scrollToEnd(): void;

declare module "constelation-scroll-view" {
  declare class ScrollView extends React$Component<> {
    props: {
      align?: 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch',
      justify?: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around',
      alignSelf?: 'auto' | 'flex-start' | 'flex-end' | 'center' | 'stretch',
      animated?: boolean,
      bottom?: number,
      center?: boolean,
      flex?: number | string,
      grow?: number | boolean,
      shrink?: number,
      basis?: number,
      height?: number,
      left?: number,
      margin?: number,
      marginBottom?: number,
      marginLeft?: number,
      marginRight?: number,
      marginTop?: number,
      marginVertical?: number,
      marginHorizontal?: number,
      maxHeight?: number,
      maxWidth?: number,
      minHeight?: number,
      minWidth?: number,
      overflow?: 'visible' | 'hidden' | 'scroll',
      padding?: number,
      paddingBottom?: number,
      paddingLeft?: number,
      paddingRight?: number,
      paddingTop?: number,
      paddingVertical?: number,
      paddingHorizontal?: number,
      position?: 'absolute' | 'relative',
      refNode?: () => {},
      right?: number,
      style?: Object,
      top?: number,
      width?: number,
      zIndex?: number,

      alwaysBounceHorizontal?: boolean,
      alwaysBounceVertical?: boolean,
      automaticallyAdjustContentInsets?: boolean,
      bounces?: boolean,
      bouncesZoom?: boolean,
      canCancelContentTouches?: boolean,
      centerContent?: boolean,
      contentContainerStyle?: Object,
      contentInset?: { top?: number, left?: number, bottom?: number, right?: number },
      contentOffset?: { x: number, y: number },
      decelerationRate?: "fast" | "normal" | number,
      directionalLockEnabled?: boolean,
      horizontal?: boolean,
      indicatorStyle?: "default" | "black" | "white",
      keyboardDismissMode?: 'none' | 'interactive' | 'on-drag',
      keyboardShouldPersistTaps?: 'always' | 'never' | 'handled' | boolean,
      maximumZoomScale?: number,
      minimumZoomScale?: number,
      onContentSizeChange?: Function,
      onScroll?: () => void,
      onScrollAnimationEnd?: () => void,
      onScrollBeginDrag?: () => void,
      onScrollEndDrag?: () => void,
      onMomentumScrollEnd?: () => void,
      onMomentumScrollBegin?: () => void,
      pagingEnabled?: boolean,
      refreshControl?: React$Element<*>,
      removeClippedSubviews?: boolean,
      showsHorizontalScrollIndicator?: boolean,
      scrollEnabled?: boolean,
      scrollEventThrottle?: number,
      scrollIndicatorInsets?: { top?: number, left?: number, bottom?: number, right?: number },
      scrollsToTop?: boolean,
      showsVerticalScrollIndicator?: boolean,
      snapToAlignment?: "start" | "center" | "end",
      snapToInterval?: number,
      stickyHeaderIndices?: number[],
      zoomScale?: number,
    };
    scrollTo(): void;
    render(): any;
  }
  declare var exports: typeof ScrollView;
}
